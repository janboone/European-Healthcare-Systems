# -**- eval: org-toggle-inline-images: 1 -**-
#+Title: Getting Eurostat and OECD data on health and healthcare systems
#+Author: Jan Boone
#+SETUPFILE: ./org-html-themes/org/theme-readtheorg.setup
#+PROPERTY: header-args  :session getting_data :kernel python3 :async yes


#+LANGUAGE: en
#+INFOJS_OPT: view:showall toc:t ltoc:t mouse:underline path:http://orgmode.org/org-info.js
#+LaTeX_CLASS: article-12
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: toc:nil timestamp:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+STARTUP: showall
#+HTML_HEAD: <link rel="stylesheet" href="./css/Latex.css">
#+HTML_HEAD: <link rel="stylesheet" href="https://latex.now.sh/prism/prism.css">
#+HTML_HEAD: <script src="https://cdn.jsdelivr.net/npm/prismjs/prism.min.js"></script>

* Introduction

This file describes how we get the data for our project on [[./index.org][European Healthcare Systems]].

In this file we explain how we get the data and from where and at the same time we generate the data. With the data is generated in this way, a change in the data by either the OECD or Eurostat will lead to (slightly) different results.

** note on replicating the data

After finishing the analysis for the paper, I went through this file to check the data (in September 2021) and noticed that for three variables the original code below generated errors. The reason is that Eurostat changed the data and thereby the format by which it is imported using the API. At this moment this affects the variables on BMI, alcohol consumption and income inequality. For each of these variables a year of data was added (outside the years of our analysis) and to replicate the data of our analysis we now select the years of our original data set. Clearly, similar changes can happen in the future and therefore the data used for the analysis is also provided in the =data= folder.

* Preamble code

Run this code first before running the code of particular data sets. It imports the relevant libraries.

#+begin_src jupyter-python
import numpy as np
import pandas as pd
from country_codes import oecd_dictionary, eurostat_dictionary
import eurostat

EU_countries = ['Belgium', 'Bulgaria', 'Czechia', 'Denmark',
'Germany (until 1990 former territory of the FRG)', 'Germany','Estonia',
'Ireland', 'Greece', 'Spain', 'France', 'Croatia', 'Italy',
'Cyprus', 'Latvia', 'Lithuania', 'Luxembourg', 'Hungary', 'Malta',
'Netherlands', 'Austria', 'Poland', 'Portugal', 'Romania',
'Slovenia', 'Slovakia', 'Finland', 'Sweden', 'United Kingdom',
'Iceland', 'Liechtenstein', 'Norway', 'Switzerland',
'Bosnia and Herzegovina']

#+end_src

#+RESULTS:


* OECD data

** Health systems data

The OECD Health Systems Characteristics Survey can be found on this [[http://qdd.oecd.org/data/HSC][page]].

In case you cloned my repository here: Click the =Excel Download= button and save the file in the folder =./raw_data=. When this data was downloaded, the filename was =HSC_22012021_110424.xlsx=. Adjust the filename in the code below, if necessary.

#+begin_src jupyter-python :display plain

data = pd.read_excel('./raw_data/HSC_22012021_110424.xlsx','Table View',header=[0,1],index_col=[0])

data_t = data.T
rename_columns = data_t.rename(index=oecd_dictionary,inplace=True)
data_t.rename(index={'2012 - OECD countries (2012)':2012,'2016 - OECD countries (2016)':2016,'2018 - Latin American countries (2018)':2018
},inplace=True)
data_t.rename_axis(('Country','Year'),inplace=True)
data_t.reset_index(inplace=True)
#+end_src

#+RESULTS:

Some countries only have data in one year (2012 or 2016; the year 2018 refers to non-oecd countries in latin america), some in both years but then they are (almost) identical. Hence we select only one year.

#+begin_src jupyter-python :display plain
oecd_data = data_t.query('Year == 2012 | Year == 2016').drop_duplicates(subset='Country', keep = 'last')
#+end_src

#+RESULTS:

The next code block generates the dataframe on health system features that we use in the paper.

#+begin_src jupyter-python
df = pd.DataFrame()
df['country'] = oecd_data['Country']
df['Year_system_date'] = oecd_data['Year']
df['single payer system'] = (oecd_data['2.a. What is the main source of basic health care coverage in your country? (Q2)'].isin(['A national health system covering the country as a whole','A single health insurance fund (single-payer model)'])).astype(float)
df['inpatient public'] = oecd_data['31.a. Are physicians supplying in-patient specialist services predominantly (Q31a)'].isin(['Publically employed']).astype(float)
df['outpatient public'] = oecd_data["25a. Are outpatient specialists' services provided predominantly in: (Q25a)"].isin(['Outpatient departments of public hospitals','Public multi-specialty clinic']).astype(float)
df['public primary care'] = oecd_data["29.a. Are physicians supplying primary care services predominantly (Q29a)"].isin(['Publically employed']).astype(float)
df['free hospital choice'] = (oecd_data['40.a. Are patient usually free to choose hospitals for in-patient care? (Q40a)'] == 'Patients can choose any hospital without any consequence for the level of coverage').astype(int)
df['almost free hospital choice'] = oecd_data['40.a. Are patient usually free to choose hospitals for in-patient care? (Q40a)'] == 'Patients are free to choose any hospital but they have financial incentives to choose some providers, please specify'
df['public provider quality reports'] = (oecd_data['71. Are these metrics publicly reported at the provider level at least annually? (Q71)'] == 'Yes').astype(int)
df['healthcare regulator'] = (oecd_data['66. Is there an organisation with responsibility for national policy on health care quality in your country? (Q66)'] == 'Yes').astype(int)
df['ce analysis'] = (oecd_data['62.b. Do HTAs generally include results of economic evaluation? (Q62b)'] == 'Yes').astype(int)
df.to_csv('./data/oecd_systems.csv')
len(df)
  #+end_src

  #+RESULTS:
  : 38


** Avoidable hospital admissions


cite:OECD_avoidable_hospitalizations provides information on avoidable hospitalizations. 

Download the excel file Asthma and COPD hospital admission in adults, 2017 (or nearest year) at https://www.oecd-ilibrary.org/social-issues-migration-health/asthma-and-copd-hospital-admission-in-adults-2017-or-nearest-year_e1a68f0a-en to the folder =./raw_data/=. Then copy-paste the table in this excel file to the following csv file: [[./raw_data/Asthma_COPD.csv]]

With this csv file in place, we run the code below.

#+begin_src jupyter-python :display plain

df = pd.read_csv('./raw_data/Asthma_COPD.csv')

df = df[df.Country.isin(EU_countries)]
df = pd.wide_to_long(df, ["Asthma"], i="Country", j="year").reset_index()
df.rename({'Country':'country','Asthma':'avoidable hospitalizations'},inplace=True,axis=1)
df.to_csv('./data/asthma_copd.csv')
df.head()
#+end_src

#+RESULTS:
:    country  year  avoidable hospitalizations
: 0  Austria  2012                       287.9
: 1  Belgium  2012                       185.7
: 2  Denmark  2012                       336.7
: 3  Estonia  2012                        48.3
: 4  Finland  2012                       212.9


** Asthma incidence

We use avoidable hospital admissions as a measure of primary care quality in a country. One could worry that the incidence of asthma is positively correlated with (treatable) mortality across countries. To test this, we also download data on asthma incidence.

Link to the data: https://ec.europa.eu/eurostat/databrowser/view/hlth_ehis_cd1e/default/table?lang=en

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_ehis_cd1e')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries) & (df.sex.isin(["M","F"]) ) & (df.hlth_pb.isin(["ASTHMA"])) & (df.unit == "PC") & (df.isced11 == "TOTAL")&(df.age == 'TOTAL')]
df.drop(["unit","hlth_pb","isced11","age"], axis=1,inplace=True)
df = pd.melt(df,id_vars=['country','sex'],
                        value_vars=np.array([2014,2019]),
                        var_name='year',value_name='asthma percentage')
df.to_csv('./data/asthma_incidence.csv')
df.head()
#+end_src

#+RESULTS:
:     country sex  year  asthma percentage
: 0   Austria   F  2014                4.7
: 1   Belgium   F  2014                4.2
: 2  Bulgaria   F  2014                3.3
: 3    Cyprus   F  2014                4.7
: 4   Czechia   F  2014                5.5

As we only use this data in a figure in the paper (not for estimating the model) and because we only have this for one year overlapping with our data, we will not add this to the main dataframe created in Section [[merging European data]].


* Economic and health variables

All variables in this section are from the Eurostat website: https://ec.europa.eu/eurostat/data/database

** Treatable and preventable mortality of residents by cause and sex [hlth_cd_apr]

Preventable mortality is defined as death that can be mainly avoided through public health and primary prevention interventions. Treatable (or amenable) mortality is defined as death that can be mainly avoided through health care interventions, including screening and treatment. Both indicators refer to premature mortality (under age 75). The data is based on the revised OECD/Eurostat lists.

"The (age-) standardised death rate is a weighted average of age-specific mortality rates. The weighting factor is the age distribution of a standard reference population. The standard reference population used is the European standard population (see annex European standard population - revision 2012) as defined by Eurostat in 2012." from section 3.4 of https://ec.europa.eu/eurostat/cache/metadata/en/hlth_cdeath_esms.htm#unit_measure1591105000535

As explained on [[https://ec.europa.eu/eurostat/cache/metadata/en/hlth_cdeath_esms.htm#stat_pres1601631715000][this website]] death rates are expressed per 100,000 population.

Link to the data: [[https://ec.europa.eu/eurostat/data/database?node_code=hlth_cd_apr]]

=icd10= refers to the International Statistical Classification of Diseases and Related Health Problems (ICD-10 2010). We use "TOTAL" here; that is, not split up into separate diseases.

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_cd_apr')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries) & (df.sex.isin(["M","F"]) ) & (df.mortalit.isin(["PRVT","TRT"])) & (df.unit == "RT") & (df.icd10 == "TOTAL")]
df.drop(["unit","icd10","geo"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['country','sex','mortalit'],
                        value_vars=np.arange(2011,2018),
                        var_name='year',value_name='rate')
df.set_index(['country','year','sex','mortalit'],inplace=True)
df = df.unstack()
df.reset_index(inplace=True)
df.columns = [' '.join(col).strip() for col in df.columns.values]
df.rename({'rate PRVT':'Preventable mortality', 'rate TRT':'Treatable mortality'},inplace=True,axis=1)
df.to_csv('./data/preventable_mortality.csv')
df.head()
#+end_src

#+RESULTS:
:    country  year sex  Preventable mortality  Treatable mortality
: 0  Austria  2011   F                  95.29                67.41
: 1  Austria  2011   M                 248.50                96.86
: 2  Austria  2012   F                  96.16                69.72
: 3  Austria  2012   M                 252.28                91.45
: 4  Austria  2013   F                  93.22                66.84


** for robustness analysis

In the robustness analyses, we also use potential years of life lost and self-perceived health.

*** potential years of life lost [hlth_cd_apyll]

Link to data on potential years of life lost by residence:
https://ec.europa.eu/eurostat/databrowser/view/hlth_cd_apyll/default/table?lang=en
According to: https://ec.europa.eu/eurostat/cache/metadata/en/hlth_cdeath_esms.htm
"Potential Years of Life Lost (PYLL) ... is an indicator estimating the potential years lost due to premature death, i.e. death before 70. It is calculated by summing the number of years between the age at death and 70 years for each premature death. PYLL rate is expressed per 100 000 age-standardised population under 70."

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_cd_apyll')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)

df = df[df.country.isin(EU_countries) & (df.sex.isin(["M","F"]) ) & (df.icd10 == "A-R_V-Y")]
df.drop(["unit","icd10","geo"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['country','sex'],
                        value_vars=np.arange(2011,2018),
                        var_name='year',value_name='potential years of life lost')
df.to_csv('./data/years_lost.csv')
df.head()
#+end_src

#+RESULTS:
:        country sex  year  potential years of life lost
: 0      Austria   F  2011                        2381.0
: 1      Belgium   F  2011                        2783.0
: 2     Bulgaria   F  2011                        4491.0
: 3  Switzerland   F  2011                        2072.0
: 4       Cyprus   F  2011                        1745.0


*** self-perceived health [hlth_silc_10]

Link to data: https://ec.europa.eu/eurostat/databrowser/view/hlth_silc_10/default/table?lang=en

We combine percentage of population (age 16 and older) reporting to be in "Very Good - Good" health (=VG_G=) and percentage "Bad - Very Bad" (=B_VB=).


#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_silc_10')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries) & (df.sex.isin(["M","F"]) ) & (df.levels.isin(["VG_G","B_VB"])) &  (df.age == "Y_GE16") &(df['quantile'] == 'TOTAL')]
df.drop(["unit","quantile","geo"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['country','sex','levels'],
                        value_vars=np.arange(2011,2020),
                        var_name='year',value_name='rate')
df.set_index(['country','year','sex','levels'],inplace=True)
df = df.unstack()
df.reset_index(inplace=True)
df.columns = [' '.join(col).strip() for col in df.columns.values]
df.rename({'rate B_VB':'Bad Very Bad', 'rate VG_G':'Very Good Good'},inplace=True,axis=1)
df.to_csv('./data/self_perceived_health.csv')
df.head()
#+end_src

#+RESULTS:
:    country  year sex  Bad Very Bad  Very Good Good
: 0  Austria  2011   F          10.4            66.8
: 1  Austria  2011   M           8.4            70.8
: 2  Austria  2012   F           9.6            68.5
: 3  Austria  2012   M           8.4            71.7
: 4  Austria  2013   F           9.8            66.7


*** median age [demo_pjanind]

In the paper we consider the relation between median age of the population and mortality, as a check.

Link to data on the median age of population for males and females: https://ec.europa.eu/eurostat/databrowser/view/demo_pjanind/default/table?lang=en

Variable name =MMEDAGEPOP= refers to "median age of population - males" and =FMEDAGEPOP= to  "median age of population - females". 

 
#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('demo_pjanind')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)

df = df[df.country.isin(EU_countries) & (df.indic_de.isin(['MMEDAGEPOP','FMEDAGEPOP']))]
df.drop(["geo"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['country','indic_de'],
                        value_vars=np.arange(2011,2020),
                        var_name='year',value_name='median age')
df.rename({'indic_de':'sex'},inplace=True,axis=1)
df.replace({'MMEDAGEPOP':'M','FMEDAGEPOP':'F'},inplace=True)
df.to_csv('./data/population_age.csv')
df.head()
#+end_src

#+RESULTS:
:        country sex  year  median age
: 0      Austria   F  2011        43.2
: 1      Belgium   F  2011        42.0
: 2     Bulgaria   F  2011        44.7
: 3  Switzerland   F  2011        42.5
: 4       Cyprus   F  2011        36.5

** Economic indicators

This section describes the economic indicators in our data.

*** Main GDP aggregates per capita [nama_10_pc]

=B1GQ= refers to  "gross domestic product at market prices" and =CP_EUR_HAB= to "current prices, euro per capita".

Link to the data: https://ec.europa.eu/eurostat/data/database?node_code=nama_10_pc


#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('nama_10_pc')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries) & (df.na_item == 'B1GQ') & (df.unit == "CP_EUR_HAB")]
df.drop(["unit","na_item","geo"],axis=1,inplace=True)
df.drop(np.arange(1975,2011),axis=1,inplace=True)
df = pd.melt(df,id_vars=['country'],
                        value_vars=np.arange(2011,2021),
                        var_name='year',value_name='GDP per capita')

df.to_csv('./data/GDP.csv')
df.head()
#+end_src

#+RESULTS:
:        country  year  GDP per capita
: 0      Austria  2011         36970.0
: 1      Belgium  2011         34060.0
: 2     Bulgaria  2011          5620.0
: 3  Switzerland  2011         65750.0
: 4       Cyprus  2011         23270.0



*** income quantiles [icw_res_02]

We use income quantiles to measure income inequality in the paper. Link to the data: https://ec.europa.eu/eurostat/databrowser/view/icw_res_02/default/table?lang=en

=INC_DISP= refers to disposable income.

As explained in section [[note on replicating the data]] above, we select here a year to replicate the data in the analysis of the paper.


 #+begin_src jupyter-python :display plain

df = eurostat.get_data_df('icw_res_02')
df.rename({'geo\\time':'country'},inplace=True,axis=1)

df = df[(df.indic_il=='INC_DISP')&(df.statinfo=='AVG')&(df.quant_inc.isin(['QU1', 'QU2', 'QU3', 'QU4', 'QU5']))&(df.quant_expn=='TOTAL')&(df.quant_wlth=='TOTAL')]
df.drop(['unit','quant_expn','quant_wlth','indic_il','statinfo'],axis=1,inplace=True)

df = pd.melt(df,id_vars=['country','quant_inc'],
                        value_vars=df.columns[2:].values,
                        var_name='year',value_name='y_')


df.set_index(['country','year','quant_inc'],inplace=True)
df = df.unstack()
df.reset_index(inplace=True)
df.columns = [''.join(col).strip() for col in df.columns.values]
df['country'] = df['country'].replace(eurostat_dictionary)
df = df[df.year==2015]
df.drop(['year'],axis=1,inplace=True)
df.to_csv('./data/quantile_incomes.csv')
df.head()
#+end_src

#+RESULTS:
:     country    y_QU1    y_QU2    y_QU3    y_QU4    y_QU5
: 1   Austria  16497.2  27961.0  36682.2  48215.5  74495.5
: 3   Belgium  15759.0  23305.9  33245.0  44850.4  68273.3
: 5  Bulgaria   1847.7   3270.1   5115.9   7451.6  14354.6
: 7    Cyprus  11467.4  18180.6  25357.4  35763.9  60673.0
: 9   Czechia   5855.1   9334.9  12419.9  16699.2  26053.4


** healthcare expenditures by function [hlth_sha11_hc]

Link to the data: https://ec.europa.eu/eurostat/data/database?node_code=hlth_sha11_hc

We work with expenditures in euros per inhabitant (=EUR_HAB=).

In the code, we use regex =' [a-z]*'= to capture one or more letters in the data set and delete the letters. We focus on the main health spending categories HC1-HC7.

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_sha11_hc')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries) & (df.unit.isin(["EUR_HAB"]))]
df.drop(["geo","unit"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['country','icha11_hc'],
   value_vars=np.arange(2009,2019),
   var_name='year',value_name='expenditure')
df.set_index(['country','year','icha11_hc'],inplace=True)
df = df.unstack()
df.reset_index(inplace=True)
df.columns = [' '.join(col).strip() for col in df.columns.values]
df.rename(columns=lambda x: x.lstrip('^expenditure '),inplace=True)
df.drop(['HC11', 'HC11_21', 'HC12', 'HC12_22', 'HC13',
        'HC131', 'HC132', 'HC133', 'HC139', 'HC13_23', 'HC14', 'HC14_24',
        'HC1_2', 'HC21', 'HC22', 'HC23', 'HC24', 'HC31', 'HC32',
        'HC33', 'HC34', 'HC41', 'HC42', 'HC43', 'HC51', 'HC511',
        'HC512', 'HC513', 'HC52', 'HC61', 'HC62', 'HC63', 'HC64', 'HC65',
        'HC66', 'HC71', 'HC72', 'HCR1', 'HC_UNK', 'TOT_HC'],axis=1,inplace=True)

df.to_csv('./data/expenditure_financing_by_function.csv')
df.head()
#+end_src

#+RESULTS:
:    country  year      HC1     HC2     HC3     HC4     HC5    HC6     HC7
: 0  Austria  2009  1885.14  209.35  507.17  115.17  601.13  72.29  140.09
: 1  Austria  2010  1929.45  216.82  529.17  116.54  610.51  74.34  139.35
: 2  Austria  2011  1965.68  229.89  542.67  115.73  632.45  75.80  143.13
: 3  Austria  2012  2047.37  244.58  564.93  121.00  648.89  76.02  152.48
: 4  Austria  2013  2063.98  256.80  587.97  123.03  657.19  80.64  159.31


** lifestyle determinants of health

In the paper we work with three lifestyle variables: body mass index, alcohol and tobacco consumption.

*** Body mass index (BMI) by sex, age and income quintile [hlth_ehis_bm1]

Link to the data: https://ec.europa.eu/eurostat/databrowser/view/HLTH_EHIS_BM1I__custom_389481/default/table?lang=en

Overview of the categories in the data (we work with =BMI_GE30= in the age range 15-64):

| BMI        |             |
|------------+-------------|
| BMI_LT18P5 | Underweight |
| BMI18P5-24 | Normal      |
| BMI_GE30   | Obese       |

As explained in section [[note on replicating the data]] above, we select here a year to replicate the data in the analysis of the paper.

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_ehis_bm1i')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df = df[(df.bmi=='BMI_GE30')&(df['quant_inc']=='TOTAL')&(df.sex.isin(['F','M']))&(df.age=='Y15-64')]
df.drop(["quant_inc","age","unit","bmi"],axis=1,inplace=True)

df = pd.melt(df,id_vars=['geo','sex'],
     value_vars=df.columns[2:],
     var_name='year',value_name='high bmi')

df['country'] = df['geo'].replace(eurostat_dictionary)
df = df[df.year==2014]
df.drop(['geo','year'],inplace=True,axis=1)
df = df[df.country.isin(EU_countries)]
df['high bmi'] = df['high bmi'].astype(float)/100.0
df.to_csv('./data/high_bmi.csv')

df.head()
#+end_src

#+RESULTS:
:    sex  high bmi   country
: 68   F     0.113   Austria
: 69   F     0.129   Belgium
: 70   F     0.116  Bulgaria
: 71   F     0.097    Cyprus
: 72   F     0.160   Czechia


*** Daily smokers of cigarettes by sex, age and income quintile [hlth_ehis_sk3i]

Link to the data: https://ec.europa.eu/eurostat/databrowser/view/HLTH_EHIS_SK3I__custom_389732/default/table?lang=en

We choose fraction of people smoking 20 or more cigarettes a day (=SM_GE20D=) in the age category 15-64.

| code     |                                 |
|----------+---------------------------------|
| TOTAL    | Total                           |
| SM_LT20D | Less than 20 cigarettes per day |
| SM_GE20D | 20 or more cigarettes per day   |

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_ehis_sk3i')
df.rename({'time\\geo':'year'},inplace=True,axis=1)

df = df[(df.age=='Y15-64')&(df.smoking=='SM_GE20D')&(df['quant_inc']=='TOTAL')&(df.sex.isin(['F','M']))]
df.drop(["quant_inc","age","unit","smoking"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['year','sex'],
     value_vars=df.columns[2:],
     var_name='geo',value_name='smoking')

df['country'] = df['geo'].replace(eurostat_dictionary)
df.drop(['geo','year'],inplace=True,axis=1)
df = df[df.country.isin(EU_countries)]
df['smoking'] = df['smoking'].astype(float)/100.0
df.to_csv('./data/smoking.csv')
df.head()
#+end_src

#+RESULTS:
:   sex  smoking   country
: 4   F    0.063   Belgium
: 5   M    0.089   Belgium
: 6   F    0.084  Bulgaria
: 7   M    0.232  Bulgaria
: 8   F    0.029   Czechia

*** Frequency of heavy episodic drinking by sex, age and educational attainment level [hlth_ehis_al3e] 

Link to the data: https://ec.europa.eu/eurostat/databrowser/view/hlth_ehis_al3e/default/table?lang=en

Here we choose fraction of people with a "frequency of heavy drinking every month" (=MTH=), again with the age category 15-64,

As explained in section [[note on replicating the data]] above, we select here a year to replicate the data in the analysis of the paper.

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_ehis_al3e')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)

df = df[(df.age=='Y15-64')&(df.sex.isin(['F','M']))&(df.isced11=='TOTAL')&(df.frequenc=='MTH')]
df.drop(["isced11","age","unit","frequenc"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['geo','sex'],
     value_vars=df.columns[2:],
     var_name='year',value_name='binge drinking')

df['country'] = df['geo'].replace(eurostat_dictionary)
df = df[df.year==2014]
df.drop(['geo','year'],inplace=True,axis=1)
df = df[df.country.isin(EU_countries)]
df['binge drinking'] = df['binge drinking'].astype(float)/100.0
df.to_csv('./data/alcohol.csv')
df.head()
#+end_src

#+RESULTS:
:    sex  binge drinking   country
: 68   F           0.129   Austria
: 69   F           0.162   Belgium
: 70   F           0.107  Bulgaria
: 71   F           0.017    Cyprus
: 72   F           0.089   Czechia


** number of doctors and nurses

To calculate the ratio of nurses to doctor, we get the data on the number of doctors and nurses per 100k inhabitants (=P_HTHAB=).

*** doctors [hlth_rs_prs1]

Link to the data: https://ec.europa.eu/eurostat/data/database?node_code=hlth_rs_prs1

We choose the general category =OC221= and doctors who are practising (=PRACT=).

| code   |                  |
|--------+------------------|
| OC221  | Medical doctors  |
| OC2261 | Dentists         |
| OC2262 | Pharmacists      |
| OC2264 | Physiotherapists |


#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_rs_prs1')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)

df = df[(df.country.isin(EU_countries))&(df.isco08=='OC221')&(df.wstatus=='PRACT')&(df['unit']=='P_HTHAB')]
df.drop(["isco08","geo","wstatus","unit"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['country'],
     value_vars=np.arange(2006,2020),
     var_name='year',value_name='Practising medical doctors per 100k')
df.to_csv('./data/doctors.csv')
df.head()
#+end_src

#+RESULTS:
:        country  year  Practising medical doctors per 100k
: 0      Austria  2006                               444.96
: 1      Belgium  2006                               288.59
: 2     Bulgaria  2006                               369.50
: 3  Switzerland  2006                               378.72
: 4       Cyprus  2006                               255.80


*** nurses [hlth_rs_prsns]

Link to the data: https://ec.europa.eu/eurostat/databrowser/view/hlth_rs_prsns/default/table?lang=en

We work with nurses and midwifes (=OC222_322=) who are practising (=PRACT=) per hundred thousand inhabitants (=P_HTHAB=).

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_rs_prsns')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country'] = df['geo'].replace(eurostat_dictionary)

df = df[(df.country.isin(EU_countries))&(df.isco08=='OC222_322')&(df.wstatus=='PRACT')&(df['unit']=='P_HTHAB')]
df.drop(["isco08","geo","wstatus","unit"],axis=1,inplace=True)
df = pd.melt(df,id_vars=['country'],
     value_vars=np.arange(2006,2020),
     var_name='year',value_name='Practising nurses and midwives per 100k')
df.to_csv('./data/nurses.csv')
df.head()
#+end_src

#+RESULTS:
:        country  year  Practising nurses and midwives per 100k
: 0      Austria  2006                                   635.47
: 1      Belgium  2006                                   959.70
: 2     Bulgaria  2006                                   460.83
: 3  Switzerland  2006                                  1333.51
: 4       Cyprus  2006                                      NaN


* merging European data

** merging the health and economic data

This section merges all the health and economic data sets created above. For each of the data sets in the files lists, we specify the dimensions of the variable; i.e. whether it varies by country (GEO), gender (sex) and year (TIME).

#+begin_src jupyter-python :display plain
import pandas as pd

df = pd.read_csv('./data/preventable_mortality.csv')


files_list = ['doctors.csv','GDP.csv','nurses.csv','asthma_copd.csv','expenditure_financing_by_function.csv'] # GEO, TIME

second_list = ['high_bmi.csv','smoking.csv','alcohol.csv'] # GEO, sex

third_list = ['years_lost.csv','population_age.csv', 'self_perceived_health.csv'] # GEO, TIME, sex


fourth_list = ['quantile_incomes.csv'] # GEO

for f in third_list:
    df_new = pd.read_csv('./data/'+f)
    df=df.merge(df_new,how='left',left_on=['year','country','sex'], right_on=['year','country','sex'])

for f in second_list:
    df_new = pd.read_csv('./data/'+f)
    df=df.merge(df_new,how='left',left_on=['country','sex'], right_on=['country','sex'])


for f in files_list:
    df_new = pd.read_csv('./data/'+f)
    df=df.merge(df_new,how='left',left_on=['country','year'], right_on=['country','year'])

for f in fourth_list:
    df_new = pd.read_csv('./data/'+f)
    df=df.merge(df_new,how='left',left_on=['country'], right_on=['country'])

columns_to_drop = [s for s in df.columns if 'Unnamed' in s]
df.drop(columns_to_drop,axis=1,inplace=True)
df['country'].replace({'Germany (until 1990 former territory of the FRG)':'Germany'},inplace=True)

df.to_csv('./data/health_data.csv')
df.head()
#+end_src

#+RESULTS:
#+begin_example
   country  year sex  Preventable mortality  Treatable mortality  \
0  Austria  2011   F                  95.29                67.41
1  Austria  2011   M                 248.50                96.86
2  Austria  2012   F                  96.16                69.72
3  Austria  2012   M                 252.28                91.45
4  Austria  2013   F                  93.22                66.84

   potential years of life lost  median age  Bad Very Bad  Very Good Good  \
0                        2381.0        43.2          10.4            66.8
1                        4608.0        40.9           8.4            70.8
2                        2326.0        43.5           9.6            68.5
3                        4390.0        41.2           8.4            71.7
4                        2245.0        43.8           9.8            66.7

   high bmi  ...     HC3     HC4     HC5    HC6     HC7    y_QU1    y_QU2  \
0     0.113  ...  542.67  115.73  632.45  75.80  143.13  16497.2  27961.0
1     0.146  ...  542.67  115.73  632.45  75.80  143.13  16497.2  27961.0
2     0.113  ...  564.93  121.00  648.89  76.02  152.48  16497.2  27961.0
3     0.146  ...  564.93  121.00  648.89  76.02  152.48  16497.2  27961.0
4     0.113  ...  587.97  123.03  657.19  80.64  159.31  16497.2  27961.0

     y_QU3    y_QU4    y_QU5
0  36682.2  48215.5  74495.5
1  36682.2  48215.5  74495.5
2  36682.2  48215.5  74495.5
3  36682.2  48215.5  74495.5
4  36682.2  48215.5  74495.5

[5 rows x 28 columns]
#+end_example


** merging with systems data

Here we merge the health and economic data created above with the health system data from the OECD.

#+begin_src jupyter-python :display plain
import pandas as pd

df_systems_data = pd.read_csv('./data/oecd_systems.csv')
df_health_data = pd.read_csv('./data/health_data.csv')

df = df_health_data.merge(df_systems_data,how='inner',left_on=['country'], right_on=['country'])

df.drop(["Unnamed: 0_x","Unnamed: 0_y"],inplace=True,axis=1)
df.rename({'year_x':'year'},inplace=True,axis=1)
# columns_to_drop = [s for s in df.columns if 'TIME' in s]
# df.drop(columns_to_drop,axis=1,inplace=True)

df.to_csv('./data/health_and_systems_data.csv')
len(df)
#+end_src


#+RESULTS:
: 336


#+BIBLIOGRAPHY:../marginalinnovation plainnat limit:t option:-nobibsource
